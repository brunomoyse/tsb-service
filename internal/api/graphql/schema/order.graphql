type Order {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!
    status: OrderStatusEnum!
    type: OrderTypeEnum!
    isOnlinePayment: Boolean!
    discountAmount: String!
    deliveryFee: String!
    totalPrice: String!
    estimatedReadyTime: DateTime
    addressExtra: String
    orderNote: String
    orderExtra: JSON

    address: Address
    customer: User!
    payment: Payment
    items: [OrderItem!]!
}

type OrderItem {
    product: Product!
    productID: ID!
    unitPrice: String!
    quantity: Int!
    totalPrice: String!
}

enum OrderStatusEnum {
    PENDING
    CONFIRMED
    PREPARING
    AWAITING_PICK_UP
    PICKED_UP
    OUT_FOR_DELIVERY
    DELIVERED
    CANCELLED
    FAILED
}

enum OrderTypeEnum {
    DELIVERY
    PICKUP
}

input UpdateOrderInput {
    status: OrderStatusEnum
    estimatedReadyTime: DateTime
}

extend type Query {
    orders: [Order!]! @admin
    order(id: ID!): Order! @admin
    myOrders: [Order!]! @auth
    myOrder(id: ID!): Order! @auth
}

extend type Mutation {
    updateOrder(
        id: ID!
        input: UpdateOrderInput!
    ): Order! @admin
}

extend type Subscription {
    # for the restaurant—fires on *every* order update
    ordersUpdated: Order! @admin

    # for a customer—fires only when *their* order (by ID) changes
    myOrderUpdated(orderID: ID!): Order! @auth
}
