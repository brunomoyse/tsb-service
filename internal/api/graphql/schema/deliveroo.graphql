# ============================================================================
# Third-Party Delivery Platform Integration Schema
# Supports: Deliveroo, Uber Eats (coming soon)
# ============================================================================

# ============================================================================
# Enums
# ============================================================================

enum OrderSource {
  TOKYO        # Direct order from webshop
  DELIVEROO    # Order from Deliveroo
  UBER         # Order from Uber Eats
}

enum PlatformOrderStatus {
  PENDING
  PLACED
  ACCEPTED
  CONFIRMED
  REJECTED
  CANCELED
  DELIVERED
}

enum FulfillmentType {
  PLATFORM_DELIVERY    # Deliveroo/Uber Eats handles delivery
  RESTAURANT_DELIVERY  # Restaurant delivers
  CUSTOMER_PICKUP      # Customer picks up
  TABLE_SERVICE        # Dine-in/table service
  AUTONOMOUS           # Autonomous delivery (robots, etc.)
}

enum ItemAvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
  HIDDEN
}

enum PrepStage {
  IN_KITCHEN
  READY_FOR_COLLECTION_SOON
  READY_FOR_COLLECTION
  COLLECTED
}

enum RiderStatus {
  RIDER_ASSIGNED
  RIDER_ARRIVED
  RIDER_CONFIRMED_AT_RESTAURANT
  RIDER_UNASSIGNED
  RIDER_IN_TRANSIT
}

# ============================================================================
# Types
# ============================================================================

# Extend the existing Order type to include platform information
extend type Order {
  source: OrderSource!
  platformData: PlatformOrder  # Only populated for DELIVEROO/UBER orders
}

# Platform order contains platform-specific details from Deliveroo/Uber Eats
type PlatformOrder {
  source: OrderSource!
  platformOrderId: ID!
  orderNumber: String!
  displayId: String!
  locationId: String!
  brandId: String!
  status: PlatformOrderStatus!
  fulfillmentType: FulfillmentType!
  orderNotes: String
  cutleryNotes: String
  asap: Boolean!
  prepareFor: Time!
  startPreparingAt: Time!
  confirmAt: Time
  tableNumber: String

  # Pricing
  subtotal: MonetaryAmount!
  totalPrice: MonetaryAmount!
  partnerOrderSubtotal: MonetaryAmount!
  partnerOrderTotal: MonetaryAmount!
  offerDiscount: MonetaryAmount!
  cashDue: MonetaryAmount
  bagFee: MonetaryAmount
  surcharge: MonetaryAmount

  # Items
  items: [PlatformOrderItem!]!

  # Delivery info (if applicable)
  delivery: PlatformDeliveryDetails

  # Customer info
  customer: PlatformCustomer

  # Status history
  statusLog: [PlatformStatusLogItem!]!

  # Promotions
  promotions: [PlatformPromotion!]

  # Flags
  isTabletless: Boolean!
}

type PlatformOrderItem {
  posItemId: String
  name: String!
  operationalName: String!
  unitPrice: MonetaryAmount!
  totalPrice: MonetaryAmount!
  menuUnitPrice: MonetaryAmount!
  quantity: Int!
  modifiers: [PlatformOrderItem!]
  discountAmount: MonetaryAmount
}

type PlatformDeliveryDetails {
  deliveryFee: MonetaryAmount!
  address: PlatformAddress
  estimatedDeliveryAt: Time
}

type PlatformAddress {
  street: String!
  number: String!
  postalCode: String!
  city: String!
  addressLine1: String!
  addressLine2: String
  latitude: Float!
  longitude: Float!
}

type PlatformCustomer {
  firstName: String
  contactNumber: String
  contactAccessCode: String
  orderFrequencyAtSite: String
}

type PlatformStatusLogItem {
  at: Time!
  status: PlatformOrderStatus!
}

type PlatformPromotion {
  id: ID!
  name: String!
  amount: MonetaryAmount!
}

type MonetaryAmount {
  fractional: Int!
  currencyCode: String!
}

type ItemUnavailability {
  itemId: ID!
  status: ItemAvailabilityStatus!
}

type ItemUnavailabilityList {
  unavailableIds: [ID!]!
  hiddenIds: [ID!]!
}

type PlatformRiderInfo {
  estimatedArrivalTime: Time
  fullName: String!
  contactNumber: String
  bridgeCode: String
  bridgeNumber: String
  lat: Float
  lon: Float
  accuracyInMeters: Int
  statusLog: [RiderStatusLogItem!]!
}

type RiderStatusLogItem {
  at: Time!
  status: RiderStatus!
}

type PlatformOrdersConnection {
  orders: [PlatformOrder!]!
  nextCursor: String
  hasMore: Boolean!
}

type PLUMapping {
  itemId: ID!
  plu: String!
}

# ============================================================================
# Inputs
# ============================================================================

input UpdateItemAvailabilityInput {
  itemId: ID!
  status: ItemAvailabilityStatus!
}

input ReplaceAllUnavailabilitiesInput {
  unavailableIds: [ID!]!
  hiddenIds: [ID!]!
}

input UpdatePLUsInput {
  mappings: [PLUMappingInput!]!
}

input PLUMappingInput {
  itemId: ID!
  plu: String!
}

input PlatformOrderFilter {
  source: OrderSource
  status: PlatformOrderStatus
  startDate: Time
  endDate: Time
  liveOrdersOnly: Boolean
  cursor: String
}

input AcceptOrderInput {
  source: OrderSource!
  orderId: ID!
  notes: String
}

input RejectOrderInput {
  source: OrderSource!
  orderId: ID!
  reason: String!
  notes: String
}

input UpdatePrepStageInput {
  source: OrderSource!
  orderId: ID!
  stage: PrepStage!
  delay: Int # Optional delay in minutes (0, 2, 4, 6, 8, or 10)
}

# ============================================================================
# Menu Sync Preview Types
# ============================================================================

type MenuSyncPreview {
  toCreate: [ProductToCreate!]!
  toUpdate: [ProductToUpdate!]!
  toDelete: [ProductToDelete!]!
}

type ProductToCreate {
  name: String!
  price: Float!
  description: String
  category: String!
  isAvailable: Boolean!
  isVisible: Boolean!
}

type ProductToUpdate {
  id: ID!
  name: String!
  currentPrice: Float!
  newPrice: Float
  currentDescription: String
  newDescription: String
  currentAvailability: Boolean!
  newAvailability: Boolean
  currentVisibility: Boolean!
  newVisibility: Boolean
}

type ProductToDelete {
  id: ID!
  name: String!
  reason: String!
}

# ============================================================================
# Queries
# ============================================================================

extend type Query {
  """
  Get platform-specific orders (extends existing orders query)
  Filter by source (DELIVEROO/UBER) to get platform orders
  """
  platformOrders(
    source: OrderSource!
    brandId: ID
    restaurantId: ID
    filter: PlatformOrderFilter
  ): PlatformOrdersConnection! @admin

  """
  Get platform order by platform-specific order ID
  """
  platformOrder(
    source: OrderSource!
    orderId: ID!
  ): PlatformOrder @admin

  """
  Get current item unavailabilities for a site
  """
  itemUnavailabilities(
    source: OrderSource!
    brandId: ID!
    siteId: ID!
  ): ItemUnavailabilityList! @admin

  """
  Get current PLU mappings for a menu
  """
  plusMappings(
    source: OrderSource!
    brandId: ID!
    menuId: ID!
  ): [PLUMapping!]! @admin

  """
  Preview differences between local menu and platform menu before syncing
  Shows what would be created, updated, or deleted
  """
  previewSyncMenuPlatform(
    source: OrderSource!
    brandId: ID!
    menuId: ID!
  ): MenuSyncPreview! @admin
}

# ============================================================================
# Mutations
# ============================================================================

extend type Mutation {
  # ============================================================================
  # Order Management (Platform-specific operations)
  # ============================================================================

  """
  Accept a platform order (Deliveroo/Uber Eats)
  """
  acceptPlatformOrder(input: AcceptOrderInput!): PlatformOrder! @admin

  """
  Reject a platform order (Deliveroo/Uber Eats)
  """
  rejectPlatformOrder(input: RejectOrderInput!): PlatformOrder! @admin

  """
  Update preparation stage of a platform order
  """
  updatePlatformOrderPrepStage(input: UpdatePrepStageInput!): PlatformOrder! @admin

  # ============================================================================
  # Menu Management - Item Availability
  # ============================================================================

  """
  Update individual item availabilities (mark items as available/unavailable/hidden)
  """
  updateItemAvailabilities(
    source: OrderSource!
    brandId: ID!
    siteId: ID!
    items: [UpdateItemAvailabilityInput!]!
  ): ItemUnavailabilityList! @admin

  """
  Replace all item unavailabilities (bulk update)
  WARNING: This clears all previous unavailabilities
  """
  replaceAllUnavailabilities(
    source: OrderSource!
    brandId: ID!
    siteId: ID!
    input: ReplaceAllUnavailabilitiesInput!
  ): ItemUnavailabilityList! @admin

  """
  Mark items as available again (convenience mutation)
  """
  markItemsAvailable(
    source: OrderSource!
    brandId: ID!
    siteId: ID!
    itemIds: [ID!]!
  ): ItemUnavailabilityList! @admin

  """
  Mark items as sold out for the day (convenience mutation)
  """
  markItemsSoldOut(
    source: OrderSource!
    brandId: ID!
    siteId: ID!
    itemIds: [ID!]!
  ): ItemUnavailabilityList! @admin

  # ============================================================================
  # Menu Management - PLU Codes
  # ============================================================================

  """
  Update PLU (Price Look-Up) mappings for menu items
  """
  updatePLUs(
    source: OrderSource!
    brandId: ID!
    menuId: ID!
    input: UpdatePLUsInput!
  ): Boolean! @admin

  # ============================================================================
  # Menu Synchronization
  # ============================================================================

  """
  Sync local menu to platform (Deliveroo/Uber Eats)
  """
  syncMenuToPlatform(
    source: OrderSource!
    brandId: ID!
    menuId: ID!
  ): Boolean! @admin
}

# ============================================================================
# Subscriptions
# ============================================================================

extend type Subscription {
  """
  Subscribe to real-time platform order updates (Deliveroo/Uber Eats)
  Emits when order status changes (new orders, status updates)
  """
  platformOrderUpdates(
    source: OrderSource!
    restaurantId: ID!
  ): PlatformOrder! @admin

  """
  Subscribe to rider status updates
  Emits when rider is assigned, arrives, or status changes
  """
  platformRiderUpdates(
    source: OrderSource!
    restaurantId: ID!
  ): PlatformRiderUpdate! @admin
}

# ============================================================================
# Subscription Payloads
# ============================================================================

type PlatformRiderUpdate {
  orderId: ID!
  riders: [PlatformRiderInfo!]!
  stackedWith: [ID!]!
}
