package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"context"
	"errors"
	"fmt"
	graphql1 "tsb-service/internal/api/graphql"
	"tsb-service/internal/api/graphql/model"
	productApplication "tsb-service/internal/modules/product/application"
	"tsb-service/internal/modules/product/domain"
	"tsb-service/pkg/utils"

	"github.com/google/uuid"
)

// Category is the resolver for the category field.
func (r *productResolver) Category(ctx context.Context, obj *model.Product) (*model.ProductCategory, error) {
	userLang := utils.GetLang(ctx)

	loader := productApplication.GetProductCategoryLoader(ctx)
	if loader == nil {
		return nil, errors.New("no product category loader found")
	}

	// Check for error while loading the category.
	categories, err := loader.Loader.Load(ctx, obj.ID.String())
	if err != nil {
		return nil, fmt.Errorf("failed to load product category: %w", err)
	}

	// Return nil if no categories were found.
	if len(categories) == 0 {
		return nil, nil
	}

	// Map the categories to the GraphQL model
	productCategories := Map(categories, func(category *domain.Category) *model.ProductCategory {
		return ToGQLProductCategory(category, userLang)
	})

	// Return the first category found. (Assuming one product belongs to one category)
	return productCategories[0], nil
}

// Products is the resolver for the products field.
func (r *productCategoryResolver) Products(ctx context.Context, obj *model.ProductCategory) ([]*model.Product, error) {
	userLang := utils.GetLang(ctx)

	loader := productApplication.GetCategoryProductLoader(ctx)

	if loader == nil {
		return nil, errors.New("no category product loader found")
	}

	// Check for error while loading the products.
	p, err := loader.Loader.Load(ctx, obj.ID.String())
	if err != nil {
		return nil, fmt.Errorf("failed to load products: %w", err)
	}

	// Map the products to the GraphQL model
	products := Map(p, func(product *domain.Product) *model.Product {
		return ToGQLProduct(product, userLang)
	})

	return products, nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	userLang := utils.GetLang(ctx)

	p, err := r.ProductService.GetProducts(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get products: %w", err)
	}

	products := Map(p, func(product *domain.Product) *model.Product {
		return ToGQLProduct(product, userLang)
	})

	return products, nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id uuid.UUID) (*model.Product, error) {
	userLang := utils.GetLang(ctx)

	p, err := r.ProductService.GetProduct(ctx, id)

	if err != nil {
		return nil, fmt.Errorf("failed to get product: %w", err)
	}

	if p == nil {
		return nil, nil
	}

	// Map the product to the GraphQL model
	product := ToGQLProduct(p, userLang)

	return product, nil
}

// ProductCategories is the resolver for the productCategories field.
func (r *queryResolver) ProductCategories(ctx context.Context) ([]*model.ProductCategory, error) {
	userLang := utils.GetLang(ctx)

	c, err := r.ProductService.GetCategories(ctx)

	if err != nil {
		return nil, fmt.Errorf("failed to get categories: %w", err)
	}

	categories := Map(c, func(cat *domain.Category) *model.ProductCategory {
		return ToGQLProductCategory(cat, userLang)
	})

	return categories, nil
}

// ProductCategory is the resolver for the productCategory field.
func (r *queryResolver) ProductCategory(ctx context.Context, id uuid.UUID) (*model.ProductCategory, error) {
	userLang := utils.GetLang(ctx)

	c, err := r.ProductService.GetCategory(ctx, id)
	if err != nil {
		return nil, fmt.Errorf("failed to get category: %w", err)
	}

	if c == nil {
		return nil, nil
	}

	// Map the category to the GraphQL model
	category := ToGQLProductCategory(c, userLang)

	return category, nil
}

// Product returns graphql1.ProductResolver implementation.
func (r *Resolver) Product() graphql1.ProductResolver { return &productResolver{r} }

// ProductCategory returns graphql1.ProductCategoryResolver implementation.
func (r *Resolver) ProductCategory() graphql1.ProductCategoryResolver {
	return &productCategoryResolver{r}
}

// Query returns graphql1.QueryResolver implementation.
func (r *Resolver) Query() graphql1.QueryResolver { return &queryResolver{r} }

type productResolver struct{ *Resolver }
type productCategoryResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
